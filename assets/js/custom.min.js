$(document).ready(function () {
	("use strict");
	var e = $("body");
	$(function () {
		$(".preloader").fadeOut(), $("#side-menu").metisMenu();
	}),
		$(".right-side-toggle").on("click", function () {
			$(".right-sidebar").slideDown(50).toggleClass("shw-rside"),
				$(".fxhdr").on("click", function () {
					e.toggleClass("fix-header");
				}),
				$(".fxsdr").on("click", function () {
					e.toggleClass("fix-sidebar");
				});
			var i = $(".fxhdr");
			e.hasClass("fix-header") ? i.attr("checked", !0) : i.attr("checked", !1),
				e.hasClass("fix-sidebar")
					? i.attr("checked", !0)
					: i.attr("checked", !1);
		}),
		$(function () {
			var i = function () {
				var i = 60,
					s = window.innerWidth > 0 ? window.innerWidth : this.screen.width,
					l =
						(window.innerHeight > 0
							? window.innerHeight
							: this.screen.height) - 1;
				768 > s
					? ($("div.navbar-collapse").addClass("collapse"), (i = 100))
					: $("div.navbar-collapse").removeClass("collapse"),
					1170 > s
						? (e.addClass("content-wrapper"),
							$(".open-close i").removeClass("icon-arrow-left-circle"),
							$(".sidebar-nav, .slimScrollDiv")
								.css("overflow-x", "visible")
								.parent()
								.css("overflow", "visible"),
							$(".logo span").hide())
						: (e.removeClass("content-wrapper"),
							$(".open-close i").addClass("icon-arrow-left-circle"),
							$(".logo span").show()),
					(l -= i),
					1 > l && (l = 1),
					l > i && $("#page-wrapper").css("min-height", l + "px");
			},
				s = window.location,
				l = $("ul.nav a")
					.filter(function () {
						return this.href === s || 0 === s.href.indexOf(this.href);
					})
					.addClass("active")
					.parent()
					.parent()
					.addClass("in")
					.parent();
			l.is("li") && l.addClass("active"),
				$(window).ready(i),
				$(window).on("resize", i);
		}),
		$(".open-close").on("click", function () {
			$("body").hasClass("content-wrapper")
				? ($("body").trigger("resize"),
					$(".sidebar-nav, .slimScrollDiv")
						.css("overflow", "hidden")
						.parent()
						.css("overflow", "visible"),
					$("body").removeClass("content-wrapper"),
					$(".open-close i").addClass("icon-arrow-left-circle"),
					$(".logo span").show())
				: ($("body").trigger("resize"),
					$(".sidebar-nav, .slimScrollDiv")
						.css("overflow-x", "visible")
						.parent()
						.css("overflow", "visible"),
					$("body").addClass("content-wrapper"),
					$(".open-close i").removeClass("icon-arrow-left-circle"),
					$(".logo span").hide());
		}),
		(function (e, i, s) {
			var l = '[data-perform="panel-collapse"]',
				o = '[data-perform="panel-dismiss"]';
			e(l).each(function () {
				var i = {
					toggle: !1
				},
					s = e(this).closest(".panel"),
					l = s.find(".panel-wrapper"),
					o = e(this).children("i");
				l.length ||
					((l = s
						.children(".panel-heading")
						.nextAll()
						.wrapAll("<div/>")
						.parent()
						.addClass("panel-wrapper")),
						(i = {})),
					l
						.collapse(i)
						.on("hide.bs.collapse", function () {
							o.removeClass("ti-minus").addClass("ti-plus");
						})
						.on("show.bs.collapse", function () {
							o.removeClass("ti-plus").addClass("ti-minus");
						});
			}),
				e(s).on("click", l, function (i) {
					i.preventDefault();
					var s = e(this).closest(".panel"),
						l = s.find(".panel-wrapper");
					l.collapse("toggle");
				}),
				e(s).on("click", o, function (i) {
					function l() {
						var i = s.parent();
						s.remove(),
							i
								.filter(function () {
									return (
										e(this).is('[class*="col-"]') &&
										0 === e(this).children("*").length
									);
								})
								.remove();
					}
					i.preventDefault();
					var s = e(this).closest(".panel");
					l();
				});
		})(jQuery, window, document),
		$(function () {
			$('[data-toggle="tooltip"]').tooltip();
		}),
		$(function () {
			$('[data-toggle="popover"]').popover();
		}),
		$(".list-task li label").on("click", function () {
			$(this).toggleClass("task-done");
		}),
		$(".settings_box a").on("click", function () {
			$("ul.theme_color").toggleClass("theme_block");
		}),
		$(".collapseble").on("click", function () {
			$(".collapseblebox").fadeToggle(350);
		}),
		$(".slimscrollright").slimScroll({
			height: "100%",
			position: "right",
			size: "5px",
			color: "#dcdcdc"
		}),
		$(".slimscrollsidebar").slimScroll({
			height: "100%",
			position: "right",
			size: "5px",
			color: "#dcdcdc"
		}),
		$(".chat-list").slimScroll({
			height: "100%",
			position: "right",
			size: "5px",
			color: "#dcdcdc"
		}),
		e.trigger("resize"),
		$(".visited li a").on("click", function (e) {
			$(".visited li").removeClass("active");
			var i = $(this).parent();
			i.hasClass("active") || i.addClass("active"), e.preventDefault();
		}),
		$("#to-recover").on("click", function () {
			$("#loginform").slideUp(), $("#recoverform").fadeIn();
		}),
		$(".navbar-toggle").on("click", function () {
			$(".navbar-toggle i").toggleClass("ti-menu").addClass("ti-close");
		});
	$("#loading").hide();
	$(document).ajaxStart(function () {
		// $("#loading").show();
		$("#main").block({
			/*message: "<h3>Please Wait...</h3>",
						css: {
						  border: "1px solid #fff"
						}*/
			message:
				'<img src="assets/images/loading.gif" alt="" /><h1>Please Waiting...</h1>',
			css: {
				border: "none",
				background: "none"
			}
		});
		// $("#main").hide();
		/*$("#main")
				  .find("*")
				  .each(function() {
					$(this).attr("hidden", true);
				  });*/
		// document.getElementById("main").hidden = true;
	});
	$(document).ajaxStop(function () {
		// $("#loading").hide();
		$("#main").unblock();
		/*$("#main")
				  .find("*")
				  .each(function() {
					$(this).attr("hidden", false);
				  });*/
		// $("#main").show();
		// document.getElementById("main").hidden = false;
	});

	// $(".dropdown").on("mouseover", function () {
	// 	$(this).find("> .dropdown-menu").stop(true, true).slideDown("fast");
	// 	$(this).bind("mouseleave", function () {
	// 		$(this).find("> .dropdown-menu").stop(true, true).css("display", "none");
	// 	});
	// });

	//Change position for drop down
	// $(function () {
	// 	$(".dropdown li").on("mouseenter mouseleave", function (e) {
	// 		if ($(".dropdown-menu", this).length) {
	// 			var elm = $(".dropdown-menu", this);
	// 			var off = elm.offset();
	// 			var l = off.left;
	// 			var w = elm.width();
	// 			var docW = $(window).width();

	// 			var isEntirelyVisible = l + w <= docW;

	// 			if (!isEntirelyVisible) {
	// 				$(elm).addClass("dropdown-reverse");
	// 			} else {
	// 				$(elm).removeClass("dropdown-reverse");
	// 			}
	// 		}
	// 	});
	// });

	/* $('.sub-menu').parent().hover(function() {
		var menu = $(this).find("ul");
		var menupos = $(menu).offset();
	   
		if (menupos.left + menu.width() > $(window).width()) {
			var newpos = -$(menu).width();
			menu.css({ left: newpos });    
		}
	}); */

	// dropdown menu //
	$(".dropdown-menu a.dropdown-toggle").on("click", function (e) {
		if (!$(this).next().hasClass("show")) {
			$(this).parents(".dropdown-menu").first().find(".show").removeClass("show");
		}

		var $subMenu = $(this).next(".dropdown-menu");
		$subMenu.toggleClass("show");

		$(this).parents("li.nav-item.dropdown.show").on("hidden.bs.dropdown", function (e) {
			$(".dropdown-submenu .show").removeClass("show");
		});

		// var menu = $(this).parents().find('.sub-menu .show');
		var menu = $(this).parents(".dropdown-menu").first().find(".show");
		var menupos = $(menu).offset();
		if (typeof menupos !== 'undefined') {
			// console.log(menupos.left + menu.width(), $(window).width());
			if (parseInt(menupos.left) + parseInt(menu.width()) > parseInt($(window).width())) {
				let newpos = -$(menu).width();
				menu.css({ left: newpos });
			}
		}
		return false;
	});
});

(function ($) {
	$.fn.swit = function (i = null) {
		var elem = document.querySelector(".swit" + i);
		var init = new Switchery(elem, {
			/*color               : '#3d3b3b'
						,*/
			secondaryColor: "#dfdfdf",
			jackColor: "#fff",
			jackSecondaryColor: null,
			className: "switchery",
			disabled: false,
			disabledOpacity: 0.5,
			speed: "0.4s",
			size: "small"
		});
		return this;
	};
})(jQuery);

function show(page, div) {
	$.ajax({
		url: base_url + page,
		success: function (response) {
			$(div).html(response);
			$(".dl-trigger").click();
		},
		dataType: "html"
	});
	return false;
}

function gede(a) {
	var start = a.selectionStart,
		end = a.selectionEnd;
	a.value = a.value.toUpperCase();
	a.setSelectionRange(start, end);
}

function clearcode(a) {
	var start = a.selectionStart,
		end = a.selectionEnd;
	var before = a.value;
	a.value = a.value.replace(/[^a-zA-Z0-9_-]/g, "");
	if (before !== a.value) {
		end = end - 1;
	}
	a.setSelectionRange(start, end);
}

function clearname(a) {
	var start = a.selectionStart,
		end = a.selectionEnd;
	var before = a.value;
	a.value = a.value.replace(/[^a-zA-Z0-9- &]/g, "");
	if (before !== a.value) {
		end = end - 1;
	}
	a.setSelectionRange(start, end);
}

function datatable(table, link) {
	$(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		// dom: "Bfrtip",
		// buttons: ["copy", "csv", "excel", "pdf", "print"],
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
}

function datatablemod(table, link) {
	var t = $(table).DataTable({
		serverSide: false,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			}
		],
		/*dom: "lBfrtip",
					buttons: ["copy", "csv", "excel", "pdf", "print"],*/
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
		/* bStateSave: true,
			fnStateSave: function(oSettings, oData) {
				localStorage.setItem("offersDataTables", JSON.stringify(oData));
			},
			fnStateLoad: function(oSettings) {
				return JSON.parse(localStorage.getItem("offersDataTables"));
			}, */
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function datatablenoorder(table, link) {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			}
		],
		/*dom: "lBfrtip",
					buttons: ["copy", "csv", "excel", "pdf", "print"],*/
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function datatablemoddate(table, link, order = 999) {
	if (order != 999) {
		var col = order;
	} else {
		var col = 0;
	}

	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ordering: false,
		order: [],
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		// columnDefs: [{
		//     searchable: false,
		//     orderable: false,
		//     targets: [0],
		//     className: "text-center",
		// }, {
		//     orderable: true,
		//     targets: col,
		// }, ],
		/*dom: "lBfrtip",
					buttons: ["copy", "csv", "excel", "pdf", "print"],*/
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function datatable_export(table, link, folder, linkdownload) {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			}
		],
		dom: "lBfrtip",
		buttons: [
			{
				text: "<i class='fa fa-download mr-1'></i> Download",
				class: "ml-1",
				action: function (e, dt, node, config) {
					/* alert("Button activated"); */
					window.location.href = linkdownload;
				}
			}
		],
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function datatablemodd(table, link, folder, linkdownload) {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			}
		],
		dom: "lBfrtip",
		buttons: [
			{
				text: "<i class='fa fa-download mr-1'></i> Download",
				class: "ml-1",
				action: function (e, dt, node, config) {
					/* alert("Button activated"); */
					window.location.href = linkdownload + "export_1";
				}
			},
			{
				text: "<i class='fa fa-download mr-1'></i> Download Gabungan",
				class: "ml-1",
				action: function (e, dt, node, config) {
					/* alert("Button activated"); */
					window.location.href = linkdownload + "export_2";
				}
			}
		],
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function datatablemodx(table, link, folder, linkdownload) {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			}
		],
		dom: "lBfrtip",
		buttons: [
			{
				text: "<i class='fa fa-download mr-1'></i> Download",
				class: "ml-1",
				action: function (e, dt, node, config) {
					/* alert("Button activated"); */
					window.location.href = linkdownload;
				}
			},
			{
				text: "<i class='fa fa-upload mr-1'></i> Upload",
				class: "ml-1",
				action: function (e, dt, node, config) {
					/* alert("Button activated"); */
					show(folder + "/cform/form_upload", "#main");
				}
			}
		],
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
		/* bStateSave: true,
			fnStateSave: function(oSettings, oData) {
				localStorage.setItem("offersDataTables", JSON.stringify(oData));
			},
			fnStateLoad: function(oSettings) {
				return JSON.parse(localStorage.getItem("offersDataTables"));
			}, */
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function datatableedit(table, link, a = "", b = "") {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			},
			{
				targets: [a, b],
				className: "text-right"
			}
		],
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
}

function datatablemain(table, link, right = [0]) {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		ajax: link,
		lengthMenu: [
			[10, 25, 50, 100, -1],
			[10, 25, 50, 100, "All"]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			},
			{
				targets: right,
				className: "text-right"
			}
		],
		/*dom: "lBfrtip",
					buttons: ["copy", "csv", "excel", "pdf", "print"],*/
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	$("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}


function datatable_no_search(table, link) {
	var t = $(table).DataTable({
		serverSide: true,
		autoWidth: false,
		processing: true,
		searching: false,
		ajax: link,
		lengthMenu: [
			[-1, 10, 25, 50, 100],
			["All", 10, 25, 50, 100]
		],
		columnDefs: [
			{
				searchable: false,
				orderable: false,
				targets: [0],
				className: "text-center"
			}
		],
		/*dom: "lBfrtip",
					buttons: ["copy", "csv", "excel", "pdf", "print"],*/
		language: {
			decimal: "",
			emptyTable: "Tidak ada data yang tersedia pada tabel ini",
			info: "Menampilkan _START_ Sampai _END_ Dari _TOTAL_ data",
			infoEmpty: "Menampilkan 0 Sampai 0 Dari 0 Data",
			infoFiltered: "(disaring dari _MAX_ data keseluruhan)",
			infoPostFix: "",
			thousands: ".",
			lengthMenu: "<span>Tampilkan</span> _MENU_ Data",
			loadingRecords: "Sedang memproses...",
			processing: "Sedang memproses...",
			search: "Cari:",
			searchPlaceholder: "Cari Data",
			zeroRecords: "Tidak ditemukan data yang sesuai",
			paginate: {
				first: "Pertama",
				last: "Terakhir",
				next: "Selanjutnya",
				previous: "Sebelumnya"
			}
		}
		/* bStateSave: true,
			fnStateSave: function(oSettings, oData) {
				localStorage.setItem("offersDataTables", JSON.stringify(oData));
			},
			fnStateLoad: function(oSettings) {
				return JSON.parse(localStorage.getItem("offersDataTables"));
			}, */
	});
	t.on("draw.dt", function () {
		var info = t.page.info();
		t.column(0, {
			search: "applied",
			order: "applied",
			page: "applied"
		})
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1 + info.start;
			});
	});
	// $("div.dataTables_filter input", t.table().container()).focus();
	/*t.on( 'order.dt search.dt', function () {
			t.column(0, {search:'applied', order:'applied'}).nodes().each( function (cell, i) {
				cell.innerHTML = i+1;
			} );
		}).draw();*/
}

function change_apps(id) {
	$.ajax({
		type: "POST",
		data: {
			i_apps: id.value
		},
		url: base_url + "auth/get_company",
		dataType: "html",
		success: function (data) {
			$("#form-company").show();
			$("#company").html(data);
		},
		error: function () {
			alert("Error :)");
		}
	});
}

function change_departement(id) {
	$.ajax({
		type: "POST",
		data: {
			i_departement: id.value
		},
		url: base_url + "main/get_level",
		dataType: "html",
		success: function (data) {
			$("#level").html(data);
		},
		error: function () {
			alert("Error :)");
		}
	});
}

function change_level(id) {
	$.ajax({
		type: "POST",
		data: {
			i_level: id.value
		},
		url: base_url + "main/set_level",
		dataType: "html",
		success: function (data) {
			window.location.replace(base_url);
			// $('#level').html(data);
		},
		error: function () {
			alert("Error :)");
		}
	});
}

function showCalendar(id, minDate = 999, maxDate = 999) {
	if (minDate == 999) {
		minDate = "-5y";
	} else if (minDate == null) {
		minDate = null;
	} else {
		if (today.getDay() - minDate == 0) {
			minDate = minDate + 1;
			minDate = "-" + minDate + "d";
		} else {
			minDate = "-" + minDate + "d";
		}
	}

	if (maxDate == 999) {
		maxDate = "+5y";
	} else {
		if (today.getDay() + maxDate == 0) {
			maxDate = maxDate + 1;
			maxDate = "+" + maxDate + "d";
		} else {
			maxDate = "+" + maxDate + "d";
		}
	}

	//alert(minDate);
	$(id).datepicker({
		clearBtn: true,
		language: "id",
		locale: "id",
		autoclose: true,
		todayHighlight: true,
		format: "dd-mm-yyyy",
		todayBtn: "linked",
		daysOfWeekDisabled: [0],
		daysOfWeekHighlighted: [0],
		startDate: new Date($("#closing").val()),
		endDate: maxDate,
		datesDisabled: holiday
	});
}

function showCalendar2(id, minDate = 999, maxDate = 999) {
	if (minDate == 999) {
		minDate = "-5y";
	} else if (minDate == null) {
		minDate = null;
	} else {
		if (today.getDay() - minDate == 0) {
			minDate = minDate + 1;
			minDate = "-" + minDate + "d";
		} else {
			minDate = "-" + minDate + "d";
		}
	}

	if (maxDate == 999) {
		maxDate = "+5y";
	} else {
		if (today.getDay() + maxDate == 0) {
			maxDate = maxDate + 1;
			maxDate = "+" + maxDate + "d";
		} else {
			maxDate = "+" + maxDate + "d";
		}
	}

	//alert(minDate);
	$(id).datepicker({
		clearBtn: true,
		language: "id",
		locale: "id",
		autoclose: true,
		todayHighlight: true,
		format: "dd-mm-yyyy",
		todayBtn: "linked",
		daysOfWeekDisabled: [0],
		daysOfWeekHighlighted: [0],
		startDate: minDate,
		endDate: maxDate,
		datesDisabled: holiday
	});
}

function showCalendar3(id, minDate = 999, maxDate = 999) {
	if (minDate == 999) {
		minDate = "-5y";
	} else if (minDate == null) {
		minDate = null;
	} else {
		if (today.getDay() - minDate == 0) {
			minDate = minDate + 1;
			minDate = "-" + minDate + "d";
		} else {
			minDate = "-" + minDate + "d";
		}
	}

	if (maxDate == 999) {
		maxDate = "+5y";
	} else {
		if (today.getDay() + maxDate == 0) {
			maxDate = maxDate + 1;
			maxDate = "+" + maxDate + "d";
		} else {
			maxDate = "+" + maxDate + "d";
		}
	}

	//alert(minDate);
	$(id).datepicker({
		// clearBtn: true,
		language: "id",
		locale: "id",
		autoclose: true,
		todayHighlight: true,
		format: "dd-mm-yyyy",
		todayBtn: "linked",
		daysOfWeekDisabled: [0],
		daysOfWeekHighlighted: [0],
		startDate: minDate,
		endDate: maxDate,
		datesDisabled: holiday
	});
}

function hanyaAngka(evt) {
	var charCode = evt.which ? evt.which : event.keyCode;
	if (charCode > 31 && (charCode < 48 || charCode > 57)) return false;
	return true;
}

function angkahungkul(x) {
	x.value = x.value.replace(/[^\d.-]/g, "");
}

function reformat(input) {
	var num = input.value.replace(/\,/g, "");
	if (!isNaN(num)) {
		if (num.indexOf(".") > -1) {
			num = num.split(".");
			num[0] = num[0]
				.toString()
				.split("")
				.reverse()
				.join("")
				.replace(/(?=\d*\.?)(\d{3})/g, "$1,")
				.split("")
				.reverse()
				.join("")
				.replace(/^[\,]/, "");
			if (num[1].length > 4) {
				alert("maksimum 4 desimal !!!");
				num[1] = num[1].substring(0, num[1].length - 1);
			}
			input.value = num[0] + "." + num[1];
		} else {
			input.value = num
				.toString()
				.split("")
				.reverse()
				.join("")
				.replace(/(?=\d*\.?)(\d{3})/g, "$1,")
				.split("")
				.reverse()
				.join("")
				.replace(/^[\,]/, "");
		}
	} else {
		alert("input harus numerik !!!");
		input.value = input.value.substring(0, input.value.length - 1);
	}
}

function formatulang(a) {
	var s = a.replace(/\,/g, "");
	return s;
}

function formatcemua(input) {
	var num = input.toString();
	if (!isNaN(num)) {
		if (num.indexOf(".") > -1) {
			num = num.split(".");
			num[0] = num[0]
				.toString()
				.split("")
				.reverse()
				.join("")
				.replace(/(?=\d*\.?)(\d{3})/g, "$1,")
				.split("")
				.reverse()
				.join("")
				.replace(/^[\,]/, "");
			if (num[1].length > 2) {
				while (num[1].length > 2) {
					num[1] = num[1].substring(0, num[1].length - 1);
				}
			}
			input = num[0];
		} else {
			input = num
				.toString()
				.split("")
				.reverse()
				.join("")
				.replace(/(?=\d*\.?)(\d{3})/g, "$1,")
				.split("")
				.reverse()
				.join("")
				.replace(/^[\,]/, "");
		}
	}
	return input;
}

function formatdecimal(input) {
	var num = input.toString();
	if (!isNaN(num)) {
		if (num.indexOf(".") > -1) {
			num = num.split(".");
			num[0] = num[0]
				.toString()
				.split("")
				.reverse()
				.join("")
				.replace(/(?=\d*\.?)(\d{3})/g, "$1,")
				.split("")
				.reverse()
				.join("")
				.replace(/^[\,]/, "");
			if (num[1].length > 4) {
				while (num[1].length > 4) {
					num[1] = num[1].substring(0, num[1].length - 1);
				}
			}
			input = num[0] + "." + num[1];
		} else {
			input = num
				.toString()
				.split("")
				.reverse()
				.join("")
				.replace(/(?=\d*\.?)(\d{3})/g, "$1,")
				.split("")
				.reverse()
				.join("")
				.replace(/^[\,]/, "");
		}
	}
	return input;
}

function formatDate(d) {
	var dd = d.getDate();
	if (dd < 10) dd = "0" + dd;
	var mm = d.getMonth() + 1;
	if (mm < 10) mm = "0" + mm;
	var yy = d.getFullYear();
	return dd + "-" + mm + "-" + yy;
}

function splitdate(d) {
	if (d != "") {
		var dd = d.split("-")[0];
		var mm = d.split("-")[1];
		var yy = d.split("-")[2];
		return yy + mm + dd;
	} else {
		return null;
	}
}

function splitdate2(d) {
	if (d != "") {
		var dd = d.split("-")[0];
		var mm = d.split("-")[1];
		var yy = d.split("-")[2];
		return yy + '-' + mm + '-' + dd;
	} else {
		return null;
	}
}

function DateAdd(ItemType, DateToWorkOn, ValueToBeAdded) {
	switch (ItemType) {
		case "d": //add days
			DateToWorkOn.setDate(DateToWorkOn.getDate() + ValueToBeAdded);
			break;
		case "m": //add months
			DateToWorkOn.setMonth(DateToWorkOn.getMonth() + ValueToBeAdded);
			break;
		case "y": //add years
			DateToWorkOn.setYear(DateToWorkOn.getFullYear() + ValueToBeAdded);
			break;
		case "h": //add days
			DateToWorkOn.setHours(DateToWorkOn.getHours() + ValueToBeAdded);
			break;
		case "n": //add minutes
			DateToWorkOn.setMinutes(DateToWorkOn.getMinutes() + ValueToBeAdded);
			break;
		case "s": //add seconds
			DateToWorkOn.setSeconds(DateToWorkOn.getSeconds() + ValueToBeAdded);
			break;
	}
	return DateToWorkOn;
}

function getTanggal(input) {
	var today = new Date(input);
	var dd = today.getDate();
	var mm = today.getMonth() + 1;
	var yyyy = today.getFullYear();
	if (dd < 10) {
		dd = "0" + dd;
	}

	if (mm < 10) {
		mm = "0" + mm;
	}
	return (today = dd + "-" + mm + "-" + yyyy);
}

function maxDate(input) {
	var today = input.split("-").reverse().join("-");
	var batas = new Date(today);
	batas.setDate(batas.getDate() + 30);
	var baru =
		("0" + batas.getDate()).slice(-2) +
		"-" +
		("0" + (batas.getMonth() + 1)).slice(-2) +
		"-" +
		batas.getFullYear();
	return baru;
}

function number_format(number, decimals, dec_point = ".", thousands_sep = ",") {
	// Strip all characters but numerical ones.
	number = (number + "").replace(/[^0-9+\-Ee.]/g, "");
	var n = !isFinite(+number) ? 0 : +number,
		prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
		sep = typeof thousands_sep === "undefined" ? "," : thousands_sep,
		dec = typeof dec_point === "undefined" ? "." : dec_point,
		s = "",
		toFixedFix = function (n, prec) {
			var k = Math.pow(10, prec);
			return "" + Math.round(n * k) / k;
		};
	// Fix for IE parseFloat(0.55).toFixed(0) = 0;
	s = (prec ? toFixedFix(n, prec) : "" + Math.round(n)).split(".");
	if (s[0].length > 3) {
		s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
	}
	if ((s[1] || "").length < prec) {
		s[1] = s[1] || "";
		s[1] += new Array(prec - s[1].length + 1).join("0");
	}
	return s.join(dec);
}

String.prototype.replaceAll = function (stringToFind, stringToReplace) {
	if (stringToFind === stringToReplace) return this;
	var temp = this;
	var index = temp.indexOf(stringToFind);
	while (index != -1) {
		temp = temp.replace(stringToFind, stringToReplace);
		index = temp.indexOf(stringToFind);
	}
	return temp;
};

function roundUp(num, precision) {
	precision = Math.pow(10, precision);
	return Math.round(num * precision) / precision;
}

function fixedtable_new(table = null) {
	if (table == null) {
		var $table = $(".table-responsive");
	} else {
		var $table = table;
	}

	$table.freezeTable({
		columnNum: 3,
		scrollable: true
	});
}

function fixedtable(table = null) {
	if (table == null) {
		var $table = $(".table");
	} else {
		var $table = table;
	}
	$table.floatThead({
		responsiveContainer: function ($table) {
			return $table.closest(".table-responsive");
		}
	});
}

function tooltip() {
	$('[data-toggle="tooltip"]').tooltip();
}

function popover() {
	$('[data-toggle="popover"]').popover();
}

function htmlentity(str) {
	return String(str)
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;");
}

function formatDate(date) {
	var d = new Date(date),
		month = "" + (d.getMonth() + 1),
		day = "" + d.getDate(),
		year = d.getFullYear();

	if (month.length < 2) month = "0" + month;
	if (day.length < 2) day = "0" + day;

	return [day, month, year].join("-");
}

function clear_table(table) {
	$("#" + table + " tbody tr").remove();
}

function nexttab(c, event, className){
  //console.log(e.className + " " + event.which);
  var keyCode = event.which || event.charCode || event.keyCode;
  //alert(keyCode);
  if (keyCode == 9) { 
    event.preventDefault(); 
    //$(c).nextAll('.'+c.className+':enabled:first').focus();
    //console.log($(c).closest('tr'));
    $(c).closest('tr').next().find('.'+className).focus();
  } 
}

function nexttab2(c, event, className){
	var keyCode = event.which || event.charCode || event.keyCode;
	let prevEl = $(c).closest('.list-item').prev().find('.' + className);
	let nextEl = $(c).closest('.list-item').next().find('.' + className);
	if (event.shiftKey && keyCode == 9) { 
		event.preventDefault(); 
		if (prevEl.prop('readonly')) {
			$(c).closest('.list-item').prev().prev().find('.'+className).focus();
		} else {
			prevEl.focus();
		}
	} else if (keyCode == 9) {
		event.preventDefault();
		if (nextEl.prop('readonly')) {
			$(c).closest('.list-item').next().next().find('.'+className).focus();
		} else {
			nextEl.focus();
		}
	}
}
